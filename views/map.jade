extends layout

block content
    div#toolbar.intro.container-fluid.col-md-12
        div.col-md-8
        div.col-md-4.hidden-xs(style="padding:0px;") Geolocalización de objetos móviles
    .map#map
    #mouse-position
    //#popup.ol-popup
    //    a#popup-closer.ol-popup-closer(href='#')
    //    #popup-content
    //div.loading
    //    i.fa.fa.fa-spinner.fa-pulse
    //    "Loading data..."
    div(style="display: none;")
        #marker(title="Marker")
    //div.btn-group(role="group" style="position: absolute; right: 3em; top: 60px;")
    //    div.btn.btn-default.selected#mapOSM(type="button" style="visibility:visible; background: url(/images/mapOSM.jpg)" onclick="toggleOSMLayer()") OSM
    //    div.btn.btn-default#mapPNOA(type="button" style="visibility:visible; background: url(/images/mapPNOA.jpg)" onclick="togglePNOALayer()") PNOA
    div.col-md-1(style="position: absolute; right: 1em; bottom: 60px;")
        a.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formVehicle" style="position: absolute; right: 3em; ") Añade Vehiculo
    div.col-md-1(style="position: absolute; right: 1em; bottom: 95px;")
        a.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formDriver" style="position: absolute; right: 3em; ") Añade Conductor
    div.col-md-1(style="position: absolute; right: 1em; bottom: 130px;")
        a.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formVehicleDriver" style="position: absolute; right: 3em; ") Vehículo-Conductor
    a.toggleSettings
        i.fa.fa-bars
    div#alerts
    div#tools
        header.logoHeader
            h3 Panel de búsqueda
        .panel.with-nav-tabs.panel-default
            .panel-heading
                ul.nav.nav-tabs
                    li.active
                        a#tab-vehicles(href='#tab_vehicles_results', data-toggle='tab') Vehículos
                    li
                        a#tab-drivers(href='#tab_drivers_results', data-toggle='tab') Conductores
                    li
                        a#tab-filtros(href='#tab_filtros', data-toggle='tab') Filtros
            .panel-body
                .tab-content
                    #tab_vehicles_results.tab-pane.fade.in.active
                        div.p-0.card-body
                            table.table-dashboard.mb-0.table.table-borderless.vehicles-table#tabla-vehiculos
                                thead.bg-light
                                    tr
                                        th Icono
                                        th Nº
                                        th Vehículo/Conductor
                                        th Velocidad
                                tbody#vehicles_results
                    #tab_drivers_results.tab-pane.fade
                        div#drivers_results
                    #tab_filtros.tab-pane.fade
                        div#filtros
                            div.group
                                h4 Fecha de registro
                                div.panel-body
                                    div.form-group
                                        div.advanced-calendar-label
                                            label Desde:
                                            p.input-group
                                                input#fecha_desde.datepicker.form-control(type="text" placeholder="Desde" autocomplete="off")
                                        div.advanced-calendar-label
                                            label Hasta:
                                            p.input-group
                                                input#fecha_hasta.datepicker.form-control(type="text" placeholder="Hasta" autocomplete="off")
                                        button.btn.btn-success(type='button' onclick="fechaRegistroHoy()" title="Registro hoy") Fecha de Registro HOY
                                    span(style="right:2em;")
                                        button.btn-xs.btn.btn-warning(type='button' onclick="limpiaFiltros()" title="limpiar filtros de búsqueda") Limpiar filtros
    div#info-results
        header.logoHeader
            h3 Resultados
        .panel.with-nav-tabs.panel-default
            .panel-heading
                ul.nav.nav-tabs
                    li.active
                        a#tab-info(href='#tab_info', data-toggle='tab') Info
                    li
                        a#tab-rutas(href='#tab_rutas', data-toggle='tab') Rutas
            .panel-body
                .tab-content
                    #tab_info.tab-pane.fade.in.active
                        div#info_result
                    #tab_rutas.tab-pane.fade
                        div.p-0.card-body
                            div#rutas_result
    p#warning(style='background:#f80; color:#fff; padding:.5em; display:none; float:left;')  Ugh! it&apos;s a bit long!
        br
        p "Try to go on searching..."
    p#notfound(style='background:#f80; color:#fff; padding:.5em; display:none; float:left;') Sorry, there is no route to go there!
    p#notfound0(style='background:#f80; color:#fff; padding:.5em; display:none; float:left;') You&apos;re allready there!
    p#result(style='background:#0b0; color:#fff; padding:.5em; display:none; position: absolute; right: 3em; top: 150px') Found it!
        br
        p "Distance:"
        span

    //form.flotante(method="post" action="/coords")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Id
    //        input(type="text" id='identifier' class="form-control" placeholder="Id")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Coo/positionrd X
    //        input(type="text" id='coord_x' class="form-control" placeholder="Coord X")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Coord Y
    //        input(type="text" id='coord_y' class="form-control" placeholder="Coord Y")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text fecha
    //        input(type="text/javascript" id='fecha' class="form-control" placeholder="Fecha")
    //    input(type="submit" value="Send")
    script(type='text/javascript').
        //$(document).ready(function() {
        //import {dibujaPosicion} from '../routes/modules/common'
        // import TileWMS from 'https://github.com/openlayers/openlayers/blob/master/src/ol/source/TileWMS.js';
        /*
        const root = 'http://localhost:3000';
        // const root = 'https://avillena-pfg.herokuapp.com';
        */

        // Variable que alojará las entidades 'Vehicle' en JSON
        var vehiclesJSON = {};
        var numVehicles = 0;
        var ultimasPosicionesVehiculos = {};

        // Variable que alojará las entidades 'Driver' en JSON
        var driversJSON = {};
        var numDrivers = 0;

        // Vehículo seleccionado actual
        var currentVehicle = {};



        /**
         * Elements that make up the popup.
         */
        var container = document.getElementById('popup');
        var content = document.getElementById('popup-content');
        var closer = document.getElementById('popup-closer');


        /**
         * Create an overlay to anchor the popup to the map.
         */
        /*
        var overlay = new ol.Overlay({
            element: container,
            autoPan: true,
            autoPanAnimation: {
                duration: 250
            }
        });
        */
        /**
         * Add a click handler to hide the popup.
         * @return {boolean} Don't follow the href.
         */
        /*
        closer.onclick = function () {
            overlay.setPosition(undefined);
            closer.blur();
            return false;
        };
        */

        // The vector graph
        var graph = new ol.source.Vector({
            url: '/data/main_roads.geojson',
            format: new ol.format.GeoJSON()
        });
        listenerKey = graph.on('change', function () {
            if (graph.getState() == 'ready') {
                $('.loading').hide();
                ol.Observable.unByKey(listenerKey);
            }
        });
        var vector = new ol.layer.Vector({
            title: 'Graph',
            source: graph
        });

        // A layer to draw the result
        var result = new ol.source.Vector();

        var map = new ol.Map({
            target: 'map',
            controls: ol.control.defaults().extend([
                new ol.control.ScaleLine({
                    className: 'ol-scale-line',
                    target: document.getElementById('scale-line')
                }),
                new ol.control.LayerPopup()
            ]),
            layers: [pnoaWmts, osm, americano, interministerial, olistat, sigpac, IGNBaseOrto],
            //overlays: [overlay],
            interactions: ol.interaction.defaults({altShiftDragRotate: false, pinchRotate: false}),
            view: new ol.View({
                //center: ol.proj.transform([#{lng},#{lat}], 'EPSG:4326', 'EPSG:3857'), zoom: 6
                center: ol.proj.fromLonLat([#{lng}, #{lat}]),
                zoom: 6
            })
        });


        /*
        // layer for showing the graph with the geometries of the roads
        map.addLayer(vector);
        map.addLayer(new ol.layer.Vector({
            source: result,
            style: new ol.style.Style({
                stroke: new ol.style.Stroke({
                    width: 2,
                    color: "#f00"
                })
            })
        }));
        */



        // *******DIJKTRA***********
        // Dijkstra
        var dijkstra = new ol.graph.Dijskra({
            source: graph
        });
        // Start processing
        dijkstra.on('start', function (e) {
            $('#warning').hide();
            $("#notfound").hide();
            $("#notfound0").hide();
            $("#result").hide();
            result.clear();
        });
        // Finish > show the route
        dijkstra.on('finish', function (e) {
            $('#warning').hide();
            result.clear();
            console.log(e);
            if (!e.route.length) {
                if (e.wDistance === -1) $("#notfound0").show();
                else $("#notfound").show();
                $("#result").hide();
            } else {
                $("#result").show();
                var t = (e.distance / 1000).toFixed(2) + 'km';
                $("#result span").html(t);
            }
            result.addFeatures(e.route);
            start = end;
            popStart.show(start);
            popEnd.hide();
        });
        // Paused > resume
        dijkstra.on('pause', function (e) {
            if (e.overflow) {
                $('#warning').show();
                dijkstra.resume();
            } else {
                // User pause
            }
        });
        // Calculating > show the current "best way"
        dijkstra.on('calculating', function (e) {
            if ($('#path').prop('checked')) {
                var route = dijkstra.getBestWay();
                result.clear();
                result.addFeatures(route);
            }
        });
        // Get the real length of the geom
        dijkstra.getLength = function (geom) {
            if (geom.getGeometry) {
                //? return geom.get('km')*1000;
                geom = geom.getGeometry();
            }
            return ol.sphere.getLength(geom)
        }
        // Start / end Placemark
        var popStart = new ol.Overlay.Placemark({popupClass: 'flagv', color: '#080'});
        map.addOverlay(popStart);
        var popEnd = new ol.Overlay.Placemark({popupClass: 'flag finish', color: '#000'});
        map.addOverlay(popEnd);
        // Manage start / end on click
        var start, end;
        // interaction with the map for calculating Dijkstra
        /*
        map.on('click', function (e) {
            if (!start) {
                start = e.coordinate;
                popStart.show(start);
            } else {
                var se = dijkstra.path(start, e.coordinate);
                if (se) {
                    start = se[0];
                    end = se[1];
                    popEnd.show(end);
                }
            }
        });
        */

        //interaccion con el calendario
        //Establece configuración común para los dos calendarios
        var dateFormat = "yy/mm/dd";
        $(".datepicker").datepicker({
            firstDay: 1,
            dateFormat: "yy/mm/dd",
            dayNamesMin: ["DO", "LU", "MA", "MI", "JU", "VI", "SA"],
            monthNames: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
            onClose: lanzaPeticionFecha,
            changeYear: true
        });

        //Establede el datepicker para el elemento #from y hace que cuando se seleccione una fecha se establezca la fecha mínima para #to
        $("#fecha_desde").datepicker().on("change", function () {
            $("#fecha_hasta").datepicker("option", "minDate", getDate(this));
        });

        //Establede el datepicker para el elemento #to y hace que cuando se seleccione una fecha se establezca la fecha máxima para #from
        $("#fecha_hasta").datepicker().on("change", function () {
            $("#fecha_desde").datepicker("option", "maxDate", getDate(this));
        });

        function getDate(element) {
            var date;
            try {
                date = $.datepicker.parseDate(dateFormat, element.value);
            } catch (error) {
                date = null;
            }

            return date;
        }

        // realiza la peticion GET al servidor para seleccionar
        function lanzaPeticionFecha() {
            var desde = $("#fecha_desde").val().split("/").join("")
            var hasta = $("#fecha_hasta").val().split("/").join("")

            if ((desde != "") && (hasta != "")) {
                peticion_http = new XMLHttpRequest();
                theUrl = ROOT + '/time/' + desde + '/' + hasta;

                peticion_http.open('GET', theUrl, true);
                peticion_http.send(null);
            }

            // Cambiar la simbología en función del día
            // https://viglino.github.io/ol-ext/examples/style/map.style.gpxline.html

            //Actualiza mapa
            //updateVehiclesPosition();

        }

        // establecer como fecha de registro a mostrar 'Hoy'
        function fechaRegistroHoy() {
            console.log('Lanzamiento de fechaRegistroHoy()')
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //Enero es 0
            var year = today.getFullYear();

            $("#fecha_desde").val(year + '/' + mm + '/' + dd);
            $("#fecha_hasta").val(year + '/' + mm + '/' + dd);

            lanzaPeticionFecha();
        }





        // Add a new Layerswitcher to the map
        //map.addControl(new ol.control.LayerSwitcherImage());

        //var coords = [-3.671180674823532, 40.412316630630755];

        // TODO: eliminar al final
        // dibuja Point pasandole una geometria en geográficas
        function dibujaPosicion(coords) {
            var pointPos = new ol.geom.Point(toUtm(coords));
            var point = new ol.Feature({
                geometry: pointPos
            });

            var stylePoint = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: [64, 200, 200, 0.5],
                    width: 1
                })
            });
            point.setStyle(stylePoint);

            vectorLayer.setSource(new ol.source.Vector());
            vectorLayer.getSource().addFeature(point);
        }

        //var view = new ol.View(map.getView());

        // Zooom and fit to the source of a layer
        function zoomToFeature(source) {
            var extent = source.getExtent();
            var polygon = new ol.geom.Polygon.fromExtent(extent);
            map.getView().fit(polygon, {padding: [170, 50, 30, 150]});
        }


        function toGeo(coords) {
            return ol.proj.transform(coords, 'EPSG:3857', 'EPSG:4326');
        }

        function toUtm(coords) {
            return ol.proj.transform(coords, 'EPSG:4326', 'EPSG:3857');
        }

        /**
         * Add a click handler to the map to render the popup.
         */
        /*
        map.on('singleclick', function (evt) {
            var coordinate = evt.coordinate;
            var hdms = toGeo(coordinate);

            content.innerHTML = '<p>Coordenadas:</p><code>' + hdms +
                '</code>';
            overlay.setPosition(coordinate);
        });

         */


        function getDrivers() {
            // consulta a lanzarse
            theUrl = ROOT + '/getDrivers';

            // petición http para obtener los conductores
            driversJSON = JSON.parse(httpGet(theUrl));
            numDrivers = driversJSON.length;

            //console.log('driversJSON: ' + JSON.stringify(driversJSON));

            //Variables para alojar los items
            var myItems = [], $drivers_results = $('#drivers_results');

            // Buclque para crear cada elemento en el panel del visualizador
            for (var i = 0; i < numDrivers; i++) {
                //console.log('i: ' + i);
                var id = driversJSON[i]['id_driver'];
                var name = driversJSON[i]['name'];
                var surname = new String(driversJSON[i]['surname']);
                var birthdate = (new Date(driversJSON[i]['birthdate']));
                birthdate = birthdate.getDate() + "/" + birthdate.getMonth() + "/" + birthdate.getFullYear();
                var genre = driversJSON[i]['genre'];
                var mobile_number = driversJSON[i]['mobile_number'];
                var email = driversJSON[i]['email'];
                var available = driversJSON[i]['available'];

                // Petición de vehículo asignado
                theUrlVehicle = ROOT + '/vehicleByIdDriver/' + id;
                var response = httpGet(theUrlVehicle);
                //console.log('Ha hecho la petición: ' + theUrlVehicle );
                //console.log('response: ' + response );
                var resVehicleAssigned = JSON.parse(response);
                //console.log('resVehicleAssigned: ' + resVehicleAssigned);
                //console.log('resVehicleAssigned: ' + JSON.stringify(resVehicleAssigned));
                //console.log('resVehicleAssigned.length: ' + resVehicleAssigned.length);
                // variable para establecer el icono del tipo de vehículo asignado. Por defecto: 'coche'
                var vehicle_mini_icon = 'f5de';
                var id_vehicle;
                if (resVehicleAssigned.length == !0) {
                    //console.log('resVehicleAssigned.length == !0');
                    var vehicle = resVehicleAssigned[0];
                    id_vehicle = vehicle['id_vehicle'] + ': ' + vehicle['brand'] + ' ' + vehicle['model'];
                    var vehicle_type = vehicle['type'];
                    var visibility = vehicle['visibility'];
                    //console.log(id_vehicle);
                } else {
                    id_vehicle = 'No asignado.';
                    var visibility = false;
                    //console.log(id_vehicle);
                }

                // Icono para el tipo de género
                var gender_icon;
                switch (genre) {
                    case 'Masculino':
                        gender_icon = 'masculino_icon.png';
                        break;
                    case 'Femenino':
                        gender_icon = 'femenino_icon.png';
                        break;
                    default:
                        gender_icon = 'interrogacion_icon.png';
                }

                // Icono para el tipo de vehículo asignado
                switch (vehicle_type) {
                    case 'Coche':
                        vehicle_mini_icon = 'f5de';
                        break;
                    case 'Furgoneta':
                        vehicle_mini_icon = 'f5b6';
                        break;
                    case 'Camión':
                        vehicle_mini_icon = 'f0d1';
                        break;
                    case 'Bicicleta':
                        vehicle_mini_icon = 'f206';
                        break;
                    case 'Motocicleta':
                        vehicle_mini_icon = 'f21c';
                        break;
                    case 'Scooter Eléctrico':
                        vehicle_mini_icon = 'f0e7';
                        break;
                    default:
                        vehicle_mini_icon = 'f5de'
                }

                // Establece el icono de visibilidad
                var eye = '';
                if (visibility == 'false') {
                    eye = 'fa-eye';
                } else {
                    eye = 'fa-eye-slash';
                }

                // Crea un elemento por cada conductor
                myItems.push("" +
                    "<div class='resultItem'>" +
                    "<img class='list-thumbnail' src='/images/" + gender_icon + "' width='50'>" +
                    "<div href='#" + id + "' class='details'>" +
                    "<div class='list-group-item-heading'><i class='fa fa-hashtag'></i>" + id + "</div>" +
                    "<div title='Email'><i class='fa fa-at'></i>" + email + "</div>" +
                    "<div title='Nombre de conductor'><i class='glyphicon glyphicon-user'></i>" + name + " " + surname + "</div>" +
                    "<div title='Fecha de nacimiento'><i class='glyphicon glyphicon-calendar'></i>" + birthdate + "</div>" +
                    "<div title='Género'><i class='fa fa-genderless'></i>" + genre + "</div>" +
                    "<div title='Número de móvil'><i class='fa fa-mobile-alt'></i>" + mobile_number + "</div>" +
                    "<div title='Vehículo'><i class='fa'>&#x" + vehicle_mini_icon + "</i>" + id_vehicle + "</div>" +
                    "<a title='Eliminar conductor' class='deleteIcon delete-driver' data-id=" + id + "><i class='fa fa-trash'></i></a>" +
                    "<a title='Editar conductor' class='editIcon edit-driver' data-toggle='modal' data-target='#editFormDriver' " +
                    " data-id=" + id + " data-name=" + name + " data-surname=" + surname + " data-birthdate= " + birthdate +
                    " data-genre=" + genre + " data-mobile_number= " + mobile_number + " data-email=" + email +
                    " data-available=" + available +
                    ">" +
                    "<i class='fa fa-edit'></i>" +
                    "</a>" +
                    "<a class='btn visualize-vehicle' title='Mostrar vehículo asociado' data-id=" + id + "><i class='fas " + eye + "'></i></a>" +
                    "<a class='btn zoom-vehicle' title='Zoom a vehículo asociado' data-id=" + id + "><i class='fas fa-bullseye'></i></a>" +
                    "</div>" +
                    "</div>");

            }
            $('#drivers_results').html(myItems.join(''));
            //console.log('Conductores capturados: ')
            //console.log(driversJSON);
            //updateFunctions();
        }



        // Devuelve la posición de la capa según el 'id' del vehículo
        function layerPosition(id) {
            var position = 0;
            for (var i = 0; i < vehiclesJSON.length; i++) {
                if (vehiclesJSON[i].id_vehicle == id) {
                    position = i + OFFSET_UP;
                }
            }
            return position;
        }



        /*
        function generateColor() {
            // generate random color for each object
            var R = Math.floor(Math.random() * 256);
            var G = Math.floor(Math.random() * 256);
            var B = Math.floor(Math.random() * 256);
            var color = 'rgba(' + R + ', ' + G + ', ' + B + ', 0.8)';
            return color;
            //console.log('array styles creado: ' + styles.length + ' styles');
        }
         */

        // Función que crea un estilo con un estilo aleatorio para cada vehículo
        // TODO: crear un color aleatorio pero de un array con colores preestablecidos, ya que algunos que crea esta función no se ven muy bien en el mapa
        function createStyle() {
            var color = generateColor();
            var stroke = new ol.style.Stroke({color: 'black', width: 2});
            var fill = new ol.style.Fill({color: color});

            // Estilo para cada vehículo
            var style = {
                'linestring': new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: color,
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: color
                    })
                }),
                'endpoint': new ol.style.Style({
                    image: new ol.style.Icon({
                        opacity: 1,
                        scale: 1,
                        color: color,
                        crossOrigin: 'anonymous',
                        src: '/images/geolocation_marker_heading.png',
                        rotateWithView: true
                    })
                }),
                'startpoint': new ol.style.Style({
                    image: new ol.style.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: 10,
                        angle: Math.PI / 4
                    })
                })
                /*
                ,'singlepoint': new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 5,
                        //fill: new ol.style.Fill({color: 'black'}),
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 1.5
                        })
                    })
                })

                 */
            };
            return style;
        }


        // Inicializa las capas para cada vehículo
        function initializeLayers() {
            for (var i = 0; i < numVehicles; i++) {
                var id = vehiclesJSON[i]['id_vehicle'];

                //TODO: al ser asincrona esta funcion, hay veces que se desordenan las capas, respecto a los elementos
                // HTML generados al vuelo.
                //console.log('Llama a createLayerById para el id: ' + id);
                createLayerById(id);

                var layerposition = layerPosition(id);
                //console.log('layerposition: ' + layerposition);
            }
        }




        // Crea una cpa para cada vehículo
        var styles = [];
        function createLayerById(id) {
            //console.log('createLayerById: ' + id);
            var peticionGet = "";
            peticionGet = 'position-vehicle/' + id;
            //console.log('Id: ' + id);

            $.ajax({
                dataType: "json",
                url: peticionGet,
                type: 'GET',
                success: function (data) {
                    if (data.features != null) {
                        var format = new ol.format.GeoJSON({
                            defaultDataProjection: 'EPSG:3857'
                        });

                        var features = format.readFeatures(data, {
                            dataProjection: 'EPSG:4326',
                            featureProjection: 'EPSG:3857'
                        });

                        // Crea un Polygono a partir de los puntos del vehículo
                        var lineStringCoords = [];
                        for (var i in features) {
                            var c = features[i].getGeometry().getCoordinates();
                            lineStringCoords.push(c);
                        }

                        // Obtiene la rotación de los últimos dos puntos
                        var twoCoordinates = lineStringCoords.slice(
                            lineStringCoords.length - 2,
                            lineStringCoords.length
                        );

                        // console.log('lineStringCoords del vehículo id: ' + id);
                        // console.log(lineStringCoords);

                        // objeto GeoJSON con las coordenadas de la ruta
                        var line = {
                            "type": "Feature",
                            // "properties": {
                            //     "stroke": "#f00"
                            // },
                            "geometry": {
                                "type": "LineString",
                                "coordinates": lineStringCoords
                            }
                        };

                        // console.log('line');
                        // console.log(line);

                        // almacena en la variable 'rotation' el angulo entre dos puntos
                        var rotation = extractRotation(twoCoordinates);

                        // Crea el estilo para la capa
                        var style = createStyle();

                        // Establece la rotación para el icono de 'posición actual'
                        style.endpoint.getImage().setRotation(-rotation + (Math.PI / 2));

                        // Almacena el estilo en el array de estilos
                        styles.push(style);

                        // Crea la capa
                        var layer = new ol.layer.Vector({
                            visible: true,
                            zIndex: 1,
                            style: style.linestring
                        });

                        // TODO: dibujar splines en vez de LineString (https://openlayers.org/en/latest/examples/turf.html?q=turf)
                        // http://jsfiddle.net/ntkuqe2a/
                        // https://viglino.github.io/ol-ext/examples/geom/map.geom.cspline.html
                        // Crea una entidad con las coordenadas del LineString

                        var curved = turf.bezierSpline(line, {sharpness: SUAVIDAD});
                        // curved.properties = {stroke: '#0f0'};

                        // curved.properties = { tension: 1,
                        //     pointsPerSeg: 100};

                        // Objeto geoJSON FeaatureCollection ya spline
                        var geojsonObject = {
                            "type": "FeatureCollection",
                            //"features": [line, curved]
                            "features": [line]
                        };


                        // Crea un nuevo objeto Vector para alojar las entidades
                        var vectorSource = new ol.source.Vector({
                            features: (new ol.format.GeoJSON()).readFeatures(geojsonObject)
                        });

                        /*
                        var feature = new ol.Feature({
                            geometry: new ol.geom.LineString(lineStringCoords)
                        })

                        console.log('feature geometry');
                        console.log(feature);
                        */


                        /*
                        var feature = new ol.Feature({
                            geometry: new ol.geom.LineString(lineStringCoords)
                        })

                        // Crea un nuevo objeto Vector para alojar las entidades
                        var vectorSource = new ol.source.Vector({
                            features: [feature]
                        });
                         */
                        // Añade un punto de inicio de la geometría LineString
                        var coordinatesStart = features[0].getGeometry().getCoordinates();
                        var startPoint = new ol.Feature(new ol.geom.Point(coordinatesStart));
                        startPoint.setStyle(style.startpoint);

                        // Añade las nuevas entidades al mapa
                        vectorSource.addFeature(startPoint);

                        // Añade los puntos intermedios a la línea
                        /*
                        for (var i in lineStringCoords) {
                            //console.log('Punto: ' + i + ', ' + lineStringCoords[i]);
                            var point = new ol.Feature(new ol.geom.Point(lineStringCoords[i]));
                            point.setStyle(style.singlepoint);
                            vectorSource.addFeature(point);
                        }
                         */

                        // Establece la fuente para la capa
                        layer.setSource(vectorSource);

                    } else {
                        var style = createStyle();

                        styles.push(style);
                        var layer = new ol.layer.Vector({
                            visible: false,
                            zIndex: 1,
                            style: style.linestring
                        });
                    }

                    // Añade la capa al mapa
                    map.addLayer(layer);
                },
                error: function (err) {
                    console.log(err);
                }
            })
        }

        // Actualiza la posición actual de todos los vehículos
        function updateVehiclesPosition() {
            vehicles = getVehicles();
            var peticionGet = "";

            // Bucle para obtener la posición de cada vehículo
            var numVehicles = vehicles.length;
            for (var i = 0; i < numVehicles; i++) {
                var id = null;
                id = vehicles[i].id_vehicle;
                var layerposition = layerPosition(id);
                //console.log("i: " + i + ", id: " + id);
                GETrequest = 'position-vehicle/' + id;
                //console.log("Lanza petición: " + GETrequest);
                $.ajax({
                    async: false,
                    cache: false,
                    dataType: "json",
                    url: GETrequest,
                    type: 'GET',
                    success: function (data) {
                        //console.log("Tiene coordenadas el vehículo id: " + id + "?");
                        //console.log(data.features);
                        if (data.features != null) {
                            var format = new ol.format.GeoJSON({
                                //defaultDataProjection: 'EPSG:3857'
                            });

                            var features = format.readFeatures(data, {
                                //dataProjection: 'EPSG:4326',
                                //featureProjection: 'EPSG:3857'
                            });

                            // Crea un Polygon a partir de puntos del vehículo
                            var lineStringCoords = [];
                            for (var i in features) {
                                var c = features[i].getGeometry().getCoordinates();
                                lineStringCoords.push(c);
                            }

                            // Obtiene la rotación de los últimos dos puntos
                            var twoCoordinates = lineStringCoords.slice(
                                lineStringCoords.length - 2,
                                lineStringCoords.length
                            );

                            // objeto GeoJSON con las coordenadas de la ruta
                            var line = {
                                "type": "Feature",
                                // "properties": {
                                //     "stroke": "#f00"
                                // },
                                "geometry": {
                                    "type": "LineString",
                                    "coordinates": lineStringCoords
                                }
                            };

                            var rotation = extractRotation(twoCoordinates);

                            // Crea el estilo para la capa
                            var style = styles[layerposition - OFFSET_DOWN];

                            // Establece la rotación para el icono de la posición actual
                            style.endpoint.getImage().setRotation(-rotation + (Math.PI / 2));

                            // Actualiza el estilo en el array de estilos
                            styles[layerposition - OFFSET_DOWN] = style;

                            // TODO: dibujar splines en vez de LineString (https://openlayers.org/en/latest/examples/turf.html?q=turf)
                            // http://jsfiddle.net/ntkuqe2a/
                            // https://viglino.github.io/ol-ext/examples/geom/map.geom.cspline.html
                            // creates a feature with the coordinates of the linestring
                            var curved = turf.bezierSpline(line, {sharpness: SUAVIDAD});
                            // curved.properties = {stroke: '#0f0'};

                            // curved.properties = {
                            //     tension: 1,
                            //     pointsPerSeg: 100
                            // };

                            // Objeto geoJSON FeaatureCollection ya spline
                            var geojsonObject = {
                                "type": "FeatureCollection",
                                //"features": [line, curved]
                                "features": [line]
                            };


                            // Crea un nuevo objeto Vector para alojar las entidades
                            var vectorSource = new ol.source.Vector({
                                features: (new ol.format.GeoJSON()).readFeatures(geojsonObject)
                            });

                            // Añade punto de inicio a partir de la geometría linestring
                            var coordinatesStart = features[0].getGeometry().getCoordinates();
                            var startPoint = new ol.Feature(new ol.geom.Point(coordinatesStart));
                            startPoint.setStyle(style.startpoint);

                            // Añade nuevas entidades al mapa
                            vectorSource.addFeature(startPoint);

                            // Añade los puntos intermedios a la línea
                            /*
                            for (var i in lineStringCoords) {
                                //console.log('Punto: ' + i + ', ' + lineStringCoords[i]);
                                var point = new ol.Feature(new ol.geom.Point(lineStringCoords[i]));
                                point.setStyle(style.singlepoint);
                                vectorSource.addFeature(point);
                            }

                             */
                            // Variable para almacenar la capa actual
                            var layer = map.getLayers().getArray()[layerposition];

                            if (layer == undefined) {
                                //console.log('Genera una capa nueva, id:' + layerposition)
                                createLayerById(id);
                            }

                            //console.log("Actualiza source!")
                            layer.setSource(vectorSource);

                            // Actualiza la visualización de la capa
                            drawCurrentIdPosition(id, layer, layerposition);

                        } else {
                            //console.log("No tiene coordenadas");
                            var style = createStyle();

                            styles.push(style);
                            var layer = new ol.layer.Vector({
                                visible: false,
                                zIndex: 1,
                                style: style.linestring
                            });
                        }
                    }
                })
            }
        }


        // Crea los elementos HTML para cada vehículo
        function createVehicleHTMLelements() {
            var myItems = [], $vehicles_results = $('#vehicles_results');

            for (var i = 0; i < ultimasPosicionesVehiculos.features.length; i++) {
                var feature = ultimasPosicionesVehiculos.features[i].properties;
                var id = feature['id_vehicle'];
                var type = feature['vehicleType'];
                var available = feature['available'];
                var matricula = feature['matricula'];
                var velocidad = feature['speed'];

                // Petición del conductor asignado
                theUrlDriver = ROOT + '/driverByIdVehicle/' + id;
                var resDriverAssigned = JSON.parse(httpGet(theUrlDriver));
                var id_driver;
                if (resDriverAssigned.length == !0) {
                    var driver = resDriverAssigned[0];
                    id_driver = driver['id_driver'] + ': ' + driver['name'] + ' ' + driver['surname'];
                } else {
                    id_driver = 'No asignado.';
                }

                // Icono para el tipo de vehículo
                var type_icon;
                switch (type) {
                    case 'Coche':
                        type_icon = 'car_icon.png';
                        break;
                    case 'Furgoneta':
                        type_icon = 'van_icon.png';
                        break;
                    case 'Camión':
                        type_icon = 'truck_icon.png';
                        break;
                    case 'Bicicleta':
                        type_icon = 'bicycle_icon.png';
                        break;
                    case 'Motocicleta':
                        type_icon = 'motorbike_icon.png';
                        break;
                    case 'Scooter Eléctrico':
                        type_icon = 'electric_scooter_icon.png';
                        break;
                    default:
                        type_icon = 'car_icon.png'
                }


                // Crea elementos HTML para cada vehículo
                myItems.push("" +
                    "<tr>" +
                    "<td class='align-items-center align-middle' title='Icono'>" +
                    "<img class='list-thumbnail' src='/images/" + type_icon + "' width=\"50\">" +
                    "</td>" +
                    "<td class='align-middle' title='Número'>" + id + "</td>" +
                    "<td class='align-middle'>" +
                    "<div>" +
                    "<h4 class='mb-1 font-weight-semi-bold' title='Matrícula vehículo'>" + matricula + "</h4>" +
                    "<p class='mb-0' title='Conductor'>" + id_driver + "</p>" +
                    "</div>" +
                    "</td>" +
                    "<td class='align-middle' title='Velocidad'>" + velocidad + " km/h</td>" +
                    "</tr>");
            }

            $('#vehicles_results').html(myItems.join(''));

            // hace visible el menu lateral de la información de cada vehículo
            //$("#info-results").toggle();

            //console.log('vehiculos creados: ')
            //console.log(vehiclesJSON);

            updateFunctions();
        }

        // Función que solicita todos los vehículos almacenados en la BD
        function lanzaPeticionDrivers() {
            //console.log('Peticion enviada')
            peticion_http = new XMLHttpRequest();
            peticion_http.open('GET', ROOT + '/getDrivers/', true);
            peticion_http.send(null);
        }

        // Función que ejecuta la función lanzaPeticionDrivers() cuando se pulsa sobre la pestaña 'vehículos'
        $('#nav-vehicles-tab').on('click', function () {
            lanzaPeticionDrivers();
        });

        // Ejecuta efecto 'slide'
        function conmutaPanelBusqueda() {
            // Ejecuta el efecto
            $("#panelbusqueda").toggle('drop', {}, 500);
        };

        // Establece el efecto del valor seleccionado desde el menú
        $("#botonmenu").click(function () {
            // Ejecuta el efecto
            conmutaPanelBusqueda();
            lanzaPeticionDrivers();
        });

        // Muestra u oculta el menú principal
        $(".toggleSettings").click(function (event) {
            $("#tools").toggle();
        })

        // Llama a la función createVehicleHTMLelements() cada vez que se pulsa sobre la pestaña 'Vehículos'
        $("#tab-vehicles").click(function () {
            //createVehicleHTMLelements();
        })

        // Llama a la función getDrivers() cada vez que se pulsa sobre la pestaña 'Vonductores'
        $("#tab-drivers").click(function () {
            getDrivers();
        })


        // Crea una alerta
        function createAlert(message) {
            // Control
            var notification = new ol.control.Notification({});
            map.addControl(notification);
            notification.show(message);
        }

        // Función que dibuja la posición de la capa con el identificador especificado
        function drawCurrentIdPosition(id, layer, layerposition) {
            //console.log('dibujar posición del punto actual de la capa con id: ' + id);
            var vectorSource = layer.getSource();
            if (vectorSource != null) {
                var features = vectorSource.getFeatures();
                var points = features[0].getGeometry().getCoordinates();
                var last = points.length - 1;
                var coordinatesEnd = points[last];
                var endPoint = new ol.Feature(new ol.geom.Point(coordinatesEnd));
                var style = styles[layerposition - OFFSET_DOWN];
                endPoint.setStyle(style.endpoint);
                //console.log('layer.getVisible(): ' + layer.getVisible());
                vectorSource.addFeature(endPoint);
            } else {
                // muestra una alerta que indica si no hay posiciones registradas para el vhículo con id especificado
                createAlert('¡El vehicle id: ' + id + '  no tiene posiciones registradas!');
            }
        }

        // Crea una capa para dibujar cada uno de los objetos
        /*
        function showFeatureLayer(id){
            var layerposition = layerPosition(id);
            var layer = map.getLayers().getArray()[layerposition];
            if(layer.getVisible() == true){
                layer.setVisible(false);
            }else{
                layer.setVisible(true);
                drawCurrentIdPosition(id, layer, layerposition);
            }
        }

         */

        function toggleOSMLayer() {
            //console.log("activa/desactiva capa OSM");
            var layerOSM = map.getLayers().getArray()[0];
            var layerPNOA = map.getLayers().getArray()[1];
            var IGNBaseOrto = map.getLayers().getArray()[2];


            if (layerOSM.getVisible() == false && layerPNOA.getVisible() == true) {
                $("#mapPNOA").removeClass('selected');
                $("#mapOSM").addClass('selected');
                layerOSM.setVisible(true);
                layerPNOA.setVisible(false);
                IGNBaseOrto.setVisible(false);
            }
        }

        function togglePNOALayer() {
            //console.log("activa/desactiva capa PNOA");
            var layerOSM = map.getLayers().getArray()[0];
            var layerPNOA = map.getLayers().getArray()[1];
            var IGNBaseOrto = map.getLayers().getArray()[2];


            if (layerOSM.getVisible() == true && layerPNOA.getVisible() == false) {
                $("#mapOSM").removeClass('selected');
                $("#mapPNOA").addClass('selected');
                layerOSM.setVisible(false);
                layerPNOA.setVisible(true);
                IGNBaseOrto.setVisible(true);
            }
        }

        function updateFunctions() {
            // Borra conductor por su 'id'
            $(".delete-driver").on('click', function () {
                var id = $(this).data('id');
                var url = '/deleteDriver/' + id;
                if (confirm('¿Delete conductor con id:' + id + '?')) {
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        success: function (result) {
                            console.log('Borrando conductor con id:' + id);
                            window.location.href = '/map';
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    })
                }
            });

            // Edita conductor seleccionado
            $(".edit-driver").on('click', function () {
                // console.log('intentando editar un driver');
                $("#edit-form-id").val($(this).data('id'));
                $("#edit-form-name").val($(this).data('name'));
                $("#edit-form-surname").val($(this).data('surname'));
                $("#edit-form-birthdate").val($(this).data('birthdate'));
                $("#edit-form-genre").val($(this).data('genre'));
                $("#edit-form-mobile_number").val($(this).data('mobile_number'));
                $("#edit-form-email").val($(this).data('email'));
                $("#edit-form-password").val($(this).data('password'));

            });

            // Edita el vehículo seleccionado
            $(".edit-vehicle").on('click', function () {
                // console.log('intentando editar un vehicle');

                $("#edit-vehicle-form-id").val($(this).data('id'));
                $("#edit-vehicle-form-type").val($(this).data('type'));
                $("#edit-vehicle-form-brand").val($(this).data('brand'));
                $("#edit-vehicle-form-model").val($(this).data('model'));
                $("#edit-vehicle-form-passengers").val($(this).data('passengers'));
                $("#edit-vehicle-form-fuel").val($(this).data('fuel'));
                $("#edit-vehicle-form-available").val($(this).data('available'));
            });


            // Elimina vehículo por su 'id'
            $(".delete-vehicle").on('click', function () {
                var id = $(this).data('id');
                var url = '/deleteVehicle/' + id;
                if (confirm('¿Borrar vehículo con id:' + id + '?')) {
                    // elimina conductor a través de una petición DELETE
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        success: function (result) {
                            console.log('Borrando Vehiculo con id:' + id);
                            window.location.href = '/map';
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    })
                }
            });


            // Visualiza y hace zoom a un vehículo
            $('.visualize-vehicle').on('click', function () {
                var id = $(this).data('id');
                var pos = layerPosition(id) - OFFSET_DOWN;

                if (vehiclesJSON[pos].visibility == true) {       // si la capa está actualmente visible, establece la clase propiamente
                    $(this).children("i").removeClass('fa-eye');
                    $(this).children("i").addClass('fa-eye-slash');
                }

                // Cambia el icono de visualización y modifica el título
                if ($(this).children("i").attr('class') == 'fas fa-eye-slash') {    // capa es 'visible', la cambia a 'no visible'
                    $(this).children("i").removeClass('fa-eye-slash');
                    $(this).children("i").addClass('fa-eye');
                    $(this).children("i").attr('title', 'Mostrar vehículo');
                    vehiclesJSON[pos].visibility = 'false'
                } else if ($(this).children("i").attr('class') == 'fas fa-eye') {    // capa es 'no visible', la cambia a 'visible'
                    $(this).children("i").removeClass('fa-eye');
                    $(this).children("i").addClass('fa-eye-slash');
                    $(this).children("i").attr('title', 'Ocultar vehículo');
                    vehiclesJSON[pos].visibility = 'true'
                }

                // Llamada a la función que muestra la posición del vehículo
                //showFeatureLayer(id);

            });


            // llama a la función zoomToFeature() para hacer zoom al objeto determinado
            $('.zoom-vehicle').on('click', function () {
                var id = $(this).data('id');
                var layerposition = layerPosition(id);
                var source = map.getLayers().getArray()[layerposition].getSource();

                // comprueba que haya fuente de datos o que la capa no tenga entidades
                if (source != null) {
                    zoomToFeature(source);rutas_result
                }
            });
            //console.log('cursor');

            // Marca y selecciona el elemento de la tabla de vehículos
            $('#tabla-vehiculos tbody tr').click(function () {
                $(this).addClass('bg-success').siblings().removeClass('bg-success');
                var id = $(this).find("td[title='Número']").text();
                seleccionaVehiculoActual(id);

                // genera los elementos HTML con los resultados
                createVehicleHTMLinfo();

                // genera los elementos HTML con las rutas realizadas
                createVehicleHTMLrutas();

                // muestra el panel lateral con los resultados del vehículo seleccionado
                $("#info-results").show("blind", 500);

                console.log('Elemento seleccionado: ' + id);
            });

            // Marca y selecciona la ruta seleccionada para pintarla en el mapa
            $('#tabla-rutas tbody tr').click(function () {
                $(this).addClass('bg-success').siblings().removeClass('bg-success');
                var fecha = $(this).find("td[title='Fecha Ruta']>h5").text();
                var id = currentVehicle.properties.id_vehicle;

                // Hace la petición para mostrar la ruta con el id_vehicle y la fecha de la ruta seleccionada
                muestraRutaPorFecha(id, fecha);

                console.log('Fecha seleccionada: ' + fecha);

            });

        }

        function limpiaFiltros() {
            $("#fecha_desde").val("");
            $("#fecha_hasta").val("");


            //Fechas por defecto
            var ahora = new Date();
            var fecha_ini = '20190901';  // fecha inicio 1 de septiembre de 2019
            var fecha_fin = '' + ahora.getFullYear() + (ahora.getMonth() + 1) + ahora.getDate();  // fecha hasta hoy

            peticion_http = new XMLHttpRequest();
            theUrl = ROOT + '/time/' + fecha_ini + '/' + fecha_fin;
            peticion_http.open('GET', theUrl, true);
            peticion_http.send(null);

        }

        $(document).ready(function () {
            // Crea estilos para los vehículos
            vehiclesJSON = getVehicles();
            numVehicles = vehiclesJSON.length;

            // Obtiene las últimas posiciones de todos los vehículos y los dibuja en el mapa
            ultimasPosicionesVehiculos = obtienePosicionActualVehiculos(vehiclesJSON);

            //Crea la capa Vector para albergar las posiciones de los vehículos
            creaCapaPosicionVehiculos(ultimasPosicionesVehiculos);

            // Crea la capa para mostrar las rutas de los vehículos
            creaCapaRutasVehiculos();

            // Inicializa las capas de los vehículos
            //initializeLayers();

            // Obtiene los conductores y los vehículos de la base de datos
            getDrivers();

            //console.log('Llamada a createVehicleHTMLelements()');
            createVehicleHTMLelements();

            // Destello de la posicion actual de los vehículos visibles
            //setInterval(blinkPoint, 500);
            function blinkPoint() {
                /*
                for (var i = 0; i < numVehicles; i++) {
                    if(map.getLayers().getArray()[i + OFFSET_UP].getSource() != null){
                        if (map.getLayers().getArray()[i + OFFSET_UP].getVisible() == true) {
                            if (styles[i].endpoint.getImage().getOpacity() == 1) {
                                styles[i].endpoint.getImage().setOpacity(0)
                                map.getLayers().getArray()[i + OFFSET_UP].getSource().refresh()
                            } else {
                                styles[i].endpoint.getImage().setOpacity(1)
                                map.getLayers().getArray()[i + OFFSET_UP].getSource().refresh()
                            }
                        }
                    }
                }
            map.renderSync();
                */
            }

            // lanza las peticiones en bucle cada 5 segundos
            //setInterval(updatePosition, 5000);

            // Función que llama la función que actualiza la posicion de los vehículos
            /*
            function updatePosition() {
                //var d = new Date();
                updateVehiclesPosition();
                //console.log('Actualizar posición en: ' + d.toLocaleTimeString());
            }

             */

        });




