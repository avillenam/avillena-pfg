extends layout

block content
    div#toolbar.intro.container-fluid.col-md-12
        div.col-md-8
        div.col-md-4.hidden-xs(style="padding:0px;") Geolocalización de objetos móviles
    .map#map
    #mouse-position
    #popup.ol-popup
        a#popup-closer.ol-popup-closer(href='#')
        #popup-content
    div(style="display: none;")
        #marker(title="Marker")
    div.col-md-1(style="position: absolute; right: 1em; top: 60px;")
        button.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formVehicle" style="position: absolute; right: 3em; top:60 px;") Add Vehicle
    div.col-md-1(style="position: absolute; right: 1em; top: 95px;")
        button.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formDriver" style="position: absolute; right: 3em; top:60 px;") Add Driver
    div.col-md-1(style="position: absolute; right: 1em; top: 130px;")
        button.btn.btn-primary.btn-block(type="button" data-toggle="modal" data-target="#formVehicleDriver" style="position: absolute; right: 3em; top:60 px;") Vehicle-Driver

    a.toggleSettings
        i.fa.fa-bars
    div#alerts
    div#tools
        header.logoHeader Panel de búsqueda
        .panel.with-nav-tabs.panel-default
            .panel-heading
                ul.nav.nav-tabs
                    li.active
                        a#tab-vehicles(href='#tab_vehicles_results', data-toggle='tab') Vehículos
                    li
                        a#tab-drivers(href='#tab_drivers_results', data-toggle='tab') Conductores
            .panel-body
                .tab-content
                    #tab_vehicles_results.tab-pane.fade.in.active
                        div#vehicles_results
                    #tab_drivers_results.tab-pane.fade
                        div#drivers_results
    // Modal Vehicle
    #formVehicle.modal.fade(tabindex='-1', role='dialog', aria-labelledby='formVehicleLabel')
        .modal-dialog(role='document')
            .modal-content
                form(method="post" action="/vehicle")
                    .modal-header
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                        h4#myVehicleLabel.modal-title Add Vehicle
                    .modal-body
                        .form-group
                            label Vehicle type
                            select.form-control(type="text" name="type")
                                option(value="Car") Car
                                option(value="Van") Van
                                option(value="Truck") Truck
                                option(value="Bike") Bike
                                option(value="Motorbike") Motorbike
                                option(value="Electric Scooter") Electric Scooter
                        .form-group
                            label Brand
                            input.form-control(type="text" name="brand")
                        .form-group
                            label Model
                            input.form-control(type="text" name="model")
                        .form-group
                            label Number of passengers
                            input.form-control(type="number" name="passengers")
                        .form-group
                            label Fuel Type
                            select.form-control(type="text" name="fuel")
                                option(value="Diesel") Diesel
                                option(value="Gas") Gas
                        .form-group
                            label Available
                            select.form-control(type="text" name="available")
                                option(value="true") True
                                option(value="false") False
                    .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Close
                        input.btn.btn-primary(type='submit' value="Save")

    // Modal Driver
    #formDriver.modal.fade(tabindex='-1', role='dialog', aria-labelledby='formDriverLabel')
        .modal-dialog(role='document')
            .modal-content
                form(method="post" action="/driver")
                    .modal-header
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                        h4#myDriverLabel.modal-title Add Driver
                    .modal-body
                        .form-group
                            label Name
                            input.form-control(type="text" name="name")
                        .form-group
                            label Surname
                            input.form-control(type="text" name="surname")
                        .form-group
                            label Birth Date
                            input.form-control(type="date" name="birthdate")
                        .form-group
                            label Genre
                            select.form-control(type="text" name="genre")
                                option(value="Male") Male
                                option(value="Female") Female
                        .form-group
                            label Mobile Number
                            input.form-control(type="tel" name="mobile_number")
                        .form-group
                            label Email
                            input.form-control(type="email" name="email")
                        .form-group
                            label Available
                            select.form-control(type="text" name="available")
                                option(value="true") True
                                option(value="false") False
                    .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Close
                        input.btn.btn-primary(type='submit' value="Save")
    // Modal Driver
    #formVehicleDriver.modal.fade(tabindex='-1', role='dialog', aria-labelledby='formVehicleDriverLabel')
        .modal-dialog(role='document')
            .modal-content
                form(method="post" action="/vehicleDriver")
                    .modal-header
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                        h4#myVehicleDriverLabel.modal-title Add Driver
                    .modal-body
                        .form-group
                            label Vehicle
                            input.form-control(type="text" name="id_vehicle")
                        .form-group
                            label Driver
                            input.form-control(type="text" name="id_driver")
                    .modal-footer
                        button.btn.btn-default(type='button', data-dismiss='modal') Close
                        input.btn.btn-primary(type='submit' value="Save")
    //form.flotante(method="post" action="/coords")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Id
    //        input(type="text" id='identifier' class="form-control" placeholder="Id")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Coord X
    //        input(type="text" id='coord_x' class="form-control" placeholder="Coord X")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text Coord Y
    //        input(type="text" id='coord_y' class="form-control" placeholder="Coord Y")
    //    .input-group.flex-nowrap.col-12
    //        .input-group-prepend
    //            span.input-group-text fecha
    //        input(type="text/javascript" id='fecha' class="form-control" placeholder="Fecha")
    //    input(type="submit" value="Send")
    script(type='text/javascript').
        //$(document).ready(function() {
        //import {dibujaPosicion} from '../routes/modules/common'
        // import TileWMS from 'https://github.com/openlayers/openlayers/blob/master/src/ol/source/TileWMS.js';
        /*
        const root = 'http://localhost:3000';
        // const root = 'https://avillena-pfg.herokuapp.com';
        */
        // variable that will house vehicles JSON features
        var vehiclesJSON = {};
        var numVehicles = 0;

        var projection = ol.proj.get('EPSG:3857');
        var projectionExtent = projection.getExtent();
        var size = ol.extent.getWidth(projectionExtent) / 256;
        var resolutions = new Array(14);
        var matrixIds = new Array(14);
        for (var z = 0; z < 22; ++z) {
            // generate resolutions and matrixIds arrays for this WMTS
            resolutions[z] = size / Math.pow(2, z);
            matrixIds[z] = z;
        };

        var styleFunction = function (id) {
            return styles[id];
        };

        var tileGrid = new ol.tilegrid.WMTS({
            origin: ol.extent.getTopLeft(projectionExtent),
            resolutions: resolutions,
            matrixIds: matrixIds
        });


        // Layer for draw single vector features
        const source = new ol.source.Vector;
        var vectorLayer = new ol.layer.Vector({
            source: source
        });

        // var wmsSource = new TileWMS({
        //     url: 'http://ows.mundialis.de/services/service?',
        //     params: {'LAYERS': 'TOPO-OSM-WMS'},
        //     crossOrigin: 'anonymous'
        // });

        var osm = new ol.layer.Tile({
            source: new ol.source.OSM()
        });


        var pnoaWmts = new ol.layer.Tile({
            opacity: 0.7,
            source: new ol.source.WMTS({
                url: 'http://www.ign.es/wmts/pnoa-ma',
                layer: 'OI.OrthoimageCoverage',
                matrixSet: 'EPSG:3857',
                format: 'image/jpeg',
                projection: projection,
                tileGrid: tileGrid,
                style: 'default',
                wrapX: true
            })
        });

        /**
         * Elements that make up the popup.
         */
        var container = document.getElementById('popup');
        var content = document.getElementById('popup-content');
        var closer = document.getElementById('popup-closer');


        /**
         * Create an overlay to anchor the popup to the map.
         */
        var overlay = new ol.Overlay({
            element: container,
            autoPan: true,
            autoPanAnimation: {
                duration: 250
            }
        });
        /**
         * Add a click handler to hide the popup.
         * @return {boolean} Don't follow the href.
         */
        closer.onclick = function () {
            overlay.setPosition(undefined);
            closer.blur();
            return false;
        };


        var map = new ol.Map({
            layers: [osm, vectorLayer],
            target: 'map',
            controls: ol.control.defaults().extend([
                new ol.control.ScaleLine({
                    className: 'ol-scale-line',
                    target: document.getElementById('scale-line')
                })
            ]),
            overlays: [overlay],
            view: new ol.View({
                //center: ol.proj.transform([#{lng}, #{lat}], 'EPSG:4326', 'EPSG:3857'), zoom: 6
                center: ol.proj.fromLonLat([#{lng}, #{lat}]),
                zoom: 6
            })
        });

        //var coords = [-3.671180674823532, 40.412316630630755];

        // dibuja Point pasandole una geometria en geográficas
        function dibujaPosicion(coords) {
            var pointPos = new ol.geom.Point(toUtm(coords));
            var point = new ol.Feature({
                geometry: pointPos
            });

            var stylePoint = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: [64, 200, 200, 0.5],
                    width: 1
                })
            });
            point.setStyle(stylePoint);

            vectorLayer.setSource(new ol.source.Vector());
            vectorLayer.getSource().addFeature(point);
        }

        //var view = new ol.View(map.getView());

        // Zooom and fit to the source of a layer
        function zoomToFeature(source){
            var extent = source.getExtent();
            var polygon = new ol.geom.Polygon.fromExtent(extent);
            map.getView().fit(polygon, {padding: [170, 50, 30, 150]});
        }


        function toGeo(coords) {
            return ol.proj.transform(coords, 'EPSG:3857', 'EPSG:4326');
        }

        function toUtm(coords) {
            return ol.proj.transform(coords, 'EPSG:4326', 'EPSG:3857');
        }

        /**
         * Add a click handler to the map to render the popup.
         */
        map.on('singleclick', function (evt) {
            var coordinate = evt.coordinate;
            var hdms = toGeo(coordinate);

            content.innerHTML = '<p>Coordenadas:</p><code>' + hdms +
                '</code>';
            overlay.setPosition(coordinate);
        });

        function borraPantalla() {
        }

        function httpGet(theUrl) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false); // false for synchronous request
            xmlHttp.send(null);
            return xmlHttp.responseText;
        }

        function getDrivers() {
            // request to be launched
            theUrl = ROOT + '/getDrivers';

            // http request to obtain the drivers
            var driversJSON = JSON.parse(httpGet(theUrl));

            //variables for house the items
            var myItems = [], $drivers_results = $('#drivers_results');

            // Loop for creating each element in the viewer panel
            for (var i = 0; i < driversJSON.length; i++) {
                var id = driversJSON[i]['id_driver'];
                var name = driversJSON[i]['name'];
                var surname = driversJSON[i]['surname'];
                var birthdate = (new Date(driversJSON[i]['birthdate']));
                birthdate = birthdate.getDate() + "/" + birthdate.getMonth() + "/" + birthdate.getFullYear();
                var genre = driversJSON[i]['genre'];
                var mobile_number = driversJSON[i]['mobile_number'];
                var email = driversJSON[i]['email'];

                //request Vehicle assigned
                theUrlVehicle = ROOT + '/vehicleByIdDriver/' + id;
                var resVehicleAssigned = JSON.parse(httpGet(theUrlVehicle));
                var id_vehicle;
                if (resVehicleAssigned.length == !0) {
                    var vehicle = resVehicleAssigned[0];
                    id_vehicle = vehicle['id_vehicle'] + ': ' + vehicle['brand'] + ' ' + vehicle['model'];
                } else {
                    id_vehicle = 'Not assigned';
                }

                myItems.push("" +
                    "<div class='resultItem'>" +
                    "<img class='list-thumbnail' src='/images/businessman-310819.svg'>" +
                    "<div href='#" + id + "' class='details'>" +
                    "<div class='list-group-item-heading'><i class='fa fa-hashtag'></i>" + id + "</div>" +
                    "<div title='Driver name'><i class='glyphicon glyphicon-user'></i>" + name + " " + surname + "</div>" +
                    "<div title='Birthdate'><i class='glyphicon glyphicon-calendar'></i>" + birthdate + "</div>" +
                    "<div title='Genre'><i class='fa fa-genderless'></i>" + genre + "</div>" +
                    "<div title='Mobile number'><i class='fa fa-mobile-alt'></i>" + mobile_number + "</div>" +
                    "<div title='Email'><i class='fa fa-at'></i>" + email + "</div>" +
                    "<div title='Vehicle'><i class='fa fa-car-alt'></i>" + id_vehicle + "</div>" +
                    "<a title='Delete driver' class='deleteIcon delete-driver' data-id=" + id + "><i class='fa fa-trash'></i></a>" +
                    "<a title='Edit Driver' class='editIcon'><i class='fa fa-edit'></i></a>" +
                    "<a class='btn visualize-driver' data-id=" + id + ">Visualize</a>" +
                    "</div>" +
                    "</div>");
                //myItems.push("Hola");
            }
            $('#drivers_results').html(myItems.join(''));
            console.log('drivers capturados: ')
            console.log(driversJSON);
            updateFunctions();
        }

        // Obtain all vehicles
        function getVehicles() {
            console.log('peticion enviada');
            theUrl = ROOT + '/getVehicles';
            vehiclesJSON = JSON.parse(httpGet(theUrl));
            return vehiclesJSON;
        }

        // return the layer position depending of the position
        function layerPosition(id) {
            var position = 0;
            for (var i = 0; i < vehiclesJSON.length; i++) {
                if (vehiclesJSON[i].id_vehicle == id) {
                    position = i + 2;
                }
            }
            return position;
        }


        function flash(feature) {
            var start = new Date().getTime();
            var listenerKey = map.on('postcompose', animate);

            function animate(event) {
                var vectorContext = event.vectorContext;
                var frameState = event.frameState;
                var flashGeom = feature.getGeometry().clone();
                var elapsed = frameState.time - start;
                var elapsedRatio = elapsed / duration;
                // radius will be 5 at start and 30 at end.
                var radius = ol.easing.easeOut(elapsedRatio) * 25 + 5;
                var opacity = ol.easing.easeOut(1 - elapsedRatio);

                var style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: radius,
                        stroke: new ol.style.Stroke({
                            color: 'rgba(255, 0, 0, ' + opacity + ')',
                            width: 0.25 + opacity
                        })
                    })
                });

                vectorContext.setStyle(style);
                vectorContext.drawGeometry(flashGeom);
                if (elapsed > duration) {
                    ol.Observable.unByKey(listenerKey);
                    return;
                }
                // tell OpenLayers to continue postcompose animation
                map.render();
            }
        }

        //Style for each vehicle
        var colors = [];
        function generateColor() {
            /*
            for(var i = 0; i< numVehicles; i++){
                console.log('crea el style: ' + i)
                var R = Math.floor(Math.random() * 256);
                var G = Math.floor(Math.random() * 256);
                var B = Math.floor(Math.random() * 256);
                var color = 'rgba(' + R + ', ' + G + ', ' + B + ', 0.8)';

                //colors.push(color);
            }
            */
            var R = Math.floor(Math.random() * 256);
            var G = Math.floor(Math.random() * 256);
            var B = Math.floor(Math.random() * 256);
            var color = 'rgba(' + R + ', ' + G + ', ' + B + ', 0.8)';
            return color;
            console.log('array styles creado: ' + styles.length + ' styles');
        }

        function createStyle(){
            var color = generateColor();
            var stroke = new ol.style.Stroke({color: 'black', width: 2});
            var fill = new ol.style.Fill({color: color});
            // styles for each vehicle
            // TODO: add a function that assign a random color for each vehicle.
            // se ha de generar al inicio un array con la simbología para cada vehicle para que sea la misma para la misma sesión.
            var style = {
                'linestring': new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: color,
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: color
                    })
                }),
                'endpoint': new ol.style.Style({
                    image: new ol.style.Icon({
                        opacity: 1,
                        scale: 1,
                        color: color,
                        crossOrigin: 'anonymous',
                        src: '/images/geolocation_marker_heading.png',
                        rotateWithView: true
                    })
                }),
                'startpoint': new ol.style.Style({
                    image: new ol.style.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: 10,
                        angle: Math.PI / 4
                    })
                })
            };
            return style;
        }


        // Initialize layers for each vehicle
        function initializeLayers(){
            for (var i = 0; i < numVehicles; i++) {
                var id = vehiclesJSON[i]['id_vehicle'];
                createLayerById(id);

                var layerposition = layerPosition(id);
                console.log('layerposition: ' + layerposition);
            }

            console.log('creacion de los styles para cada capa')
            //createStyles(numVehicles);
        }

        // extract rotation between two coordinates
        var extractRotation = function extractRotation(twoCoordinates) {
            var start = twoCoordinates[0];
            var end = twoCoordinates[1];
            var dx = end[0] - start[0];
            var dy = end[1] - start[1];
            return Math.atan2(dy, dx);
        };


        var styles = [];
        // creates layer for each vehicle
        function createLayerById(id) {
            console.log('createLayerById: ' + id);
            var peticionGet = "";
            peticionGet = 'position-vehicle/' + id;

            console.log('Id: ' + id);
            console.log('Id type: ' + typeof (id));

            $.ajax({
                dataType: "json",
                url: peticionGet,
                type: 'GET',
                success: function (data) {
                    //console.log('datos: ' + JSON.stringify(data));

                    // console.log("data.features: " + data.features);
                    // console.log("data: " + data);
                    // console.log(JSON.stringify(data));

                    if (data.features != null) {
                        var format = new ol.format.GeoJSON({
                            defaultDataProjection: 'EPSG:3857'
                        });

                        var features = format.readFeatures(data, {
                            dataProjection: 'EPSG:4326',
                            featureProjection: 'EPSG:3857'
                        });

                        // create a Polygon from points of the vehicle
                        var lineStringCoords = [];
                        for (var i in features) {
                            var c = features[i].getGeometry().getCoordinates();
                            lineStringCoords.push(c);
                        }

                        // get rotation of last two points
                        var twoCoordinates = lineStringCoords.slice(
                            lineStringCoords.length - 2,
                            lineStringCoords.length
                        );

                        var rotation = extractRotation(twoCoordinates);

                        var style = createStyle();
                        style.endpoint.getImage().setRotation(-rotation + (Math.PI / 2));

                        styles.push(style);
                        var layer = new ol.layer.Vector({
                            visible: false,
                            zIndex: 1,
                            style: style.linestring
                        });

                        var feature = new ol.Feature({
                            geometry: new ol.geom.LineString(lineStringCoords)
                        })

                        // create new Vector object to house the features
                        var vectorSource = new ol.source.Vector({
                            features: [feature]
                        });

                        // add start point from linestring geometry
                        var coordinatesStart = features[0].getGeometry().getCoordinates();
                        var startPoint = new ol.Feature(new ol.geom.Point(coordinatesStart));
                        startPoint.setStyle(style.startpoint);
                        //startPoint.setStyle(styles['startpoint']);

                        // Add new features to the map
                        vectorSource.addFeature(startPoint);

                        // set source for the layer
                        layer.setSource(vectorSource);

                    } else{
                        var style = createStyle();

                        styles.push(style);
                        var layer = new ol.layer.Vector({
                            visible: false,
                            zIndex: 1,
                            style: style.linestring
                        });
                    }

                    // add the layer to the map
                    map.addLayer(layer);
                },
                error: function (err) {
                    console.log(err);
                }
            })
        }

        //TODO: completar la funcion una vez esté el resto de funciones
        function updateVehiclesPosition(){
            var vehicles = getVehicles();
            var peticionGet = "";

            // loop for obtain position of each vehicle
            var numVehicles = vehicles.length;
            for(var i = 0; i < numVehicles ; i++){
                var id = null;
                id = vehicles[i].id_vehicle;
                var layerposition = layerPosition(id);
                console.log("i: " + i + ", id: " + id);
                GETrequest = 'position-vehicle/' + id;
                console.log("lanza petición: " + GETrequest);
                $.ajax({
                    async: false,
                    cache: false,
                    dataType: "json",
                    url: GETrequest,
                    type: 'GET',
                    success: function (data) {
                        console.log("tiene coordenadas el vehículo id: " + id + "?");
                        console.log(data.features);
                        if (data.features != null) {
                            console.log("Si tiene coordenadas")
                            var format = new ol.format.GeoJSON({
                                defaultDataProjection: 'EPSG:3857'
                            });

                            var features = format.readFeatures(data, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                            });

                            // create a Polygon from points of the vehicle
                            var lineStringCoords = [];
                            for (var i in features) {
                                var c = features[i].getGeometry().getCoordinates();
                                lineStringCoords.push(c);
                            }

                            var feature = new ol.Feature({
                                geometry: new ol.geom.Polygon(lineStringCoords)
                            })

                            // create new Vector object to house the features
                            var vectorSource = new ol.source.Vector({
                                features: [feature]
                            });

                            // variable for store currrent layer
                            var layer = map.getLayers().getArray()[layerposition];

                            if(layer == undefined){
                                console.log('genera una capa nueva, id:' + layerposition)
                                createLayerById(id);
                            }
                            console.log("Actualiza source!")
                            layer.setSource(vectorSource);
                        }else {
                            console.log("No tiene coordenadas")
                        }
                    }
                })
            }
        }

        // Creates the HTML elements for each vehicle
        function createVehicleHTMLelements(){
            //vehiclesJSON = getVehicles();
            var myItems = [], $vehicles_results = $('#vehicles_results');

            for (var i = 0; i < vehiclesJSON.length; i++) {
                var id = vehiclesJSON[i]['id_vehicle'];
                var brand = vehiclesJSON[i]['brand'];
                var model = vehiclesJSON[i]['model'];
                var passengers = vehiclesJSON[i]['passengers'];
                var fuel = vehiclesJSON[i]['fuel'];

                //request Driver assigned
                theUrlDriver = ROOT + '/driverByIdVehicle/' + id;
                var resDriverAssigned = JSON.parse(httpGet(theUrlDriver));
                var id_driver;
                if (resDriverAssigned.length == !0) {
                    var driver = resDriverAssigned[0];
                    id_driver = driver['id_driver'] + ': ' + driver['name'] + ' ' + driver['surname'];
                } else {
                    id_driver = 'Not assigned';
                }

                //create HTML element for each vehicle
                myItems.push("" +
                    "<div class='resultItem'>" +
                    "<img class='list-thumbnail' src='/images/bicycle icon.png'>" +
                    "<div href='#" + id + "' class='details'>" +
                    "<div class='list-group-item-heading'><i class='fa fa-hashtag'></i>" + id + "</div>" +
                    "<div title='Driver'><i class='glyphicon glyphicon-user'></i>" + id_driver + "</div>" +
                    "<div title='Brand, model'><i class='glyphicon glyphicon-triangle-right'></i>" + brand + ", " + model + "</div>" +
                    "<div title='Passengers'><i class='fa fa-users'></i>" + passengers + "</div>" +
                    "<div title='Fuel'><i class='fa fa-gas-pump'></i>" + fuel + "</div>" +
                    "<a title='Delete vehicle' class='deleteIcon delete-vehicle' data-id=" + id + "><i class='fa fa-trash'></i></a>" +
                    "<a title='Edit Vehicle' class='editIcon'><i class='fa fa-edit'></i></a>" +
                    "<a class='btn visualize-vehicle' title='Show vehicle' data-id=" + id + "><i class='fas fa-eye'></i></a>" +
                    "<a class='btn zoom-vehicle' title='Zoom to vehicle' data-id=" + id + "><i class='fas fa-bullseye'></i></a>" +
                    "</div>" +
                    "</div>");

                // Create a layer for each vehicle in case that does not exists
                //var numVehicles = vehiclesJSON.length;

                /*
                var numLayersVehicles = map.getLayers().getArray().length - 2;
                if(numVehicles != numLayersVehicles){
                    createLayerById(id);
                }

                 */
            }

            $('#vehicles_results').html(myItems.join(''));
            console.log('vehiculos creados: ')
            console.log(vehiclesJSON);
            updateFunctions();
        }



        function lanzaPeticionDrivers() {
            console.log('peticion enviada')
            peticion_http = new XMLHttpRequest();
            peticion_http.open('GET', ROOT + '/getDrivers/', true);
            peticion_http.send(null);
        }

        $('#nav-vehicles-tab').on('click', function () {
            lanzaPeticionDrivers();
        });


        // Execute 'slide' effect
        function conmutaPanelBusqueda() {
            // Execute the effect
            $("#panelbusqueda").toggle('drop', {}, 500);
        };

        // Set the effect from selected value from menu
        $("#botonmenu").click(function () {
            // Execute the effect
            conmutaPanelBusqueda();
            lanzaPeticionDrivers();
        });


        $(".toggleSettings").click(function (event) {
            $("#tools").toggle();
            // getDrivers();
            // createVehicleHTMLelements();
        })

        $("#tab-vehicles").click(function () {
            createVehicleHTMLelements();
        })

        $("#tab-drivers").click(function () {
            getDrivers();
        })


        // create an alert
        function createAlert(message){
            var myItems = [];
            myItems.push("" +
                "<div class='alert alert-success alert-dismissible' data-auto-dismiss role='alert'>" +
                    "<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button>" +
                    "<div>" + message + "</div>" +
                "</div>"
            )
            $('#alerts').html(myItems.join(''));
        }
        // create a layer for drawing each of the objects
        function showFeatureLayer(id){
            var layerposition = layerPosition(id);
            var layer = map.getLayers().getArray()[layerposition];
            if(layer.getVisible() == true){
                layer.setVisible(false);
            }else{
                layer.setVisible(true);

                // TODO: loop for showing current position of the vehicle
                console.log('draw position of current point of layer id: ' + id);
                var vectorSource = layer.getSource();
                if(vectorSource != null){
                    var features = vectorSource.getFeatures();
                    var points = features[0].getGeometry().getCoordinates();
                    var last = points.length - 1;
                    var coordinatesEnd = points[last];
                    var endPoint = new ol.Feature(new ol.geom.Point(coordinatesEnd));
                    var style = styles[layerposition - 2];
                    endPoint.setStyle(style.endpoint);
                    console.log('layer.getVisible(): ' + layer.getVisible());
                    vectorSource.addFeature(endPoint);
                } else{
                    // show alert that there is no features
                    createAlert('Vehicle id: ' + id + '  has no position registered!');

                }

                //endPoint.setStyle(styles['endpoint']);
                /*
                var pos = ol.proj.fromLonLat(coordinatesEnd);
                var marker = new ol.Overlay({
                    position: pos,
                    positioning: 'center-center',
                    element: document.getElementById('marker'),
                    stopEvent: false
                });
                map.addOverlay(marker);
                 */


            }
        }

        function updateFunctions(){

            // Delete driver by id
            $(".delete-driver").on('click', function () {
                var id = $(this).data('id');
                var url = '/deleteDriver/' + id;
                if (confirm('Delete driver with id:' + id + '?')) {
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        success: function (result) {
                            console.log('Deleting Driver with id:' + id);
                            window.location.href = '/map';
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    })
                }
            });

            // Delete vehicle by id
            $(".delete-vehicle").on('click', function () {
                var id = $(this).data('id');
                var url = '/deleteVehicle/' + id;
                if (confirm('Delete vehicle with id:' + id + '?')) {
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        success: function (result) {
                            console.log('Deleting Vehicle with id:' + id);
                            window.location.href = '/map';
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    })
                }
            });


            //Visualize and zoom to a vehicle
            $('.visualize-vehicle').on('click', function () {
                var id = $(this).data('id');

                //TODO: faltaría hacer una comprobación al inicio en la que el icono del ojo sea en función de si la
                // capa está visibe=true o false. Ya que cada vez que se hace un tab-vehicles se inicializan los elementos HTML

                // change visualize icon and modify title
                if($(this).children("i").attr('class')=='fas fa-eye-slash'){
                    $(this).children("i").removeClass('fa-eye-slash');
                    $(this).children("i").addClass('fa-eye');
                    $(this).children("i").attr('title','Show vehicle');
                }else if($(this).children("i").attr('class')=='fas fa-eye'){
                    $(this).children("i").removeClass('fa-eye');
                    $(this).children("i").addClass('fa-eye-slash');
                    $(this).children("i").attr('title', 'Hide vehicle');
                }

                //var url = '/position-vehicle/' + id;
                console.log('Muestra la posición del vehículo: ' + id);

                // Call to the function than show the position of the vehicle
                showFeatureLayer(id);

            });


            $('.zoom-vehicle').on('click', function () {
                var id = $(this).data('id');
                var layerposition = layerPosition(id);
                var source = map.getLayers().getArray()[layerposition].getSource();

                // test if there is source or the layer has not features
                if (source != null){
                    zoomToFeature(source);
                }
            });
            console.log('cursor')

        }

        //Apply style for each layer
        /*
        function applyLayerStyle(id) {
            var layerposition = layerPosition(id);
            var layer = map.getLayers().getArray()[layerposition];
            layer.setStyle(styles[layerposition - 2]);
        }

         */

        $(document).ready(function() {
            // create styles of the vehicles
            vehiclesJSON = getVehicles();
            numVehicles = vehiclesJSON.length;

            // Initialize layer's vehicles
            initializeLayers();

            //Call the function ceateStyles()
            //createStyles(numVehicles);


            // Obtain the drivers and the vehicles from the database
            getDrivers();
            createVehicleHTMLelements();


            // blinking current position
            setInterval(blinkPoint, 500);

            function blinkPoint() {
                for (var i = 0; i < numVehicles; i++) {
                    if (map.getLayers().getArray()[i + 2].getVisible() == true) {
                        if (styles[i].endpoint.getImage().getOpacity() == 1) {
                            console.log('apaga')
                            styles[i].endpoint.getImage().setOpacity(0)
                            map.getLayers().getArray()[i + 2].getSource().refresh()
                        } else {
                            console.log('enciende')
                            styles[i].endpoint.getImage().setOpacity(1)
                            map.getLayers().getArray()[i + 2].getSource().refresh()
                        }
                    }
                }
            map.renderSync();
            }


            // launch the requests in loop each 2 seconds
            //setInterval(updatePosition, 5000);

            // function that calls the function that update the vehicles's position
            function updatePosition() {
                var d = new Date();
                updateVehiclesPosition();
                console.log('Update position at: ' + d.toLocaleTimeString());
            }

        });

        //})
